<table width=100%>
  <tr>
    <td colspan=2><strong>
    {{python.package.name}}
      </strong>&nbsp;&nbsp;&nbsp;&nbsp;
    </td>
  </tr>
  <tr>
    <td width=15%><img src={{github.raw_url}}/master/img/icon.png style="width:150px"></td>
    <td>
        A small toolbox for working with EC2.  Including:<br/><br/>
          <strong>hop:</strong> a CLI for SSHing to EC2 using SSM-backed keys
    <br/><br/>
    <a href=https://pypi.python.org/pypi/{{python.package.name}}/><img src="https://img.shields.io/pypi/l/{{python.package.name}}.svg"></a>
    <a href=https://pypi.python.org/pypi/{{python.package.name}}/><img src="https://badge.fury.io/py/{{python.package.name}}.svg"></a>
    <a href="{{github.repo_url}}/actions/workflows/python-test.yml"><img src="{{github.repo_url}}/actions/workflows/python-test.yml/badge.svg"></a>
    </td>
  </tr>
</table>

---------------------------------------------------------------------------------

{{markdown_toc(__template__, level=1)}}

---------------------------------------------------------------------------------

## Overview

See [setup.cfg](setup.cfg) to find the latest info about dependency versions.  Larger project dependencies here include [boto](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) and [rich](https://github.com/Textualize/rich).  If that conflicts with your setup you might want to look at [using docker](#using-docker)

See the [Usage section](#usage) for more details

---------------------------------------------------------------------------------

## Installation

See [pypi](https://pypi.org/project/aws-ec2-tool/) for available releases.

```bash
$ pip install aws-ec2-tool
```

---------------------------------------------------------------------------------

## CLI Usage

After installation, you can invoke this tool as either `hop` or `python -m hop`.

Usage info follows:

{%- for entrypoint_metadata in python_cli.console_script_entrypoints %}
{% if entrypoint_metadata.bin_name == 'hop' %}
```bash
{{entrypoint_metadata.help_output}}
```
{%endif%}
{%endfor%}

---------------------------------------------------------------------------------

## Using hop with IaC

It's most convenient and powerful if you're using `hop` under circumstances that guarantee that your SSH keys are already stored in SSM according to strong conventions.  In other words.. it's a good idea to manage this stuff with infrastructure-as-code.

Here's some quick information and examples about how to get started doing that with [terraform](http://terraform.io).  Here's some of the resources involved:

* [aws_key_pair resource](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair)
* [aws_instance resource](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance)

Let's get keys stored in SSM first.  The commands below use the `ssm` command via the [aws-ssm-tool]({{github.org_url}}/aws-ssm-tool).  (This tool is an explicit dependency of this project; it's already installed if you ran `pip` for this project.)

```bash
# generate a new keypair
$ ssh-keygen -b 2048 -t rsa -f test.key -q -N ""
$ ls test.key*
test.key  test.key.pub

# put keypairs into SSM at a predictable location.
$ ssm put /your_org/keypairs/test/pub --file test.key.pub
$ ssm put /your_org/keypairs/test/pem --file test.key

# optional: get the value you set, if you want to test
$ ssm get /your_org/keypairs/test/pub
```
The keypair is in SSM now, but there's no actual keypair that we can use with EC2 yet.  Create the keypair from what's stored in SSM with terraform like this:

```terraform
data "aws_ssm_parameter" "pub_key" {
  name = "/org_name/keypairs/key_name/pub"
}

resource "aws_key_pair" "appservers" {
  key_name   = "appservers-key"
  public_key = data.aws_ssm_parameter.pub_key.value
}
```

Now you can use this keypair with EC2.

```terraform

data "aws_ami" "ubuntu" {
  most_recent = true
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "appserver-test" {
  ami           = data.aws_ami.ubuntu
  instance_type = "t3.micro"
  key_name = aws_key_pair.appservers.key_name
  tags = {
    Name = "my-appserver-name"
  }
  subnet_id = ".."
  vpc_security_group_ids=[".."]
}
```
